
#Train&Test Datasets
#orig_data <- read.csv("C:/Users/ALDO/Documents/DataMining/Coursera/PracticalMachineLearning_JohnHopkingsUniversity/pml-training.csv")
#real_data <- read.csv("C:/Users/ALDO/Documents/DataMining/Coursera/PracticalMachineLearning_JohnHopkingsUniversity/pml-testing.csv")

#Cleaining DAta: Vector variables with NAs, NaNs, Timestamps were eliminated
#coll_data <- orig_data[c(8:11,37:49,61:68,84:86,102,113:124,140,151:159,160)]
#coll_data <- orig_data[c(8,84:86,160)]
#coll_data <- orig_data[c(84:86,160)]
coll_data <- orig_data[c(8:11,37:49,61:68,84:86,102,113:124,140,151:159,160)]


#Create Training/Testing/Validation Partitions from coll data
set.seed(107)
train_data_vector <- createDataPartition(y = coll_data$classe, p=0.6, list=FALSE) #Generate Random Vector
train_data <- coll_data[ train_data_vector,] # Train Partition
test_plus_vali_data <- coll_data[ -train_data_vector,] 

testing_plus_validation <- createDataPartition(y= test_plus_vali_data$classe, p=0.5, list=FALSE) #Outcome for training dataset
test_data <- test_plus_vali_data[testing_plus_validation,] # Test partition
vali_data <- test_plus_vali_data[-testing_plus_validation,] # Vali Partition

#Obtaion Outputs for Training/Testing/Validation datasets
training_outcome <- train_data$classe #Outcome for training dataset
testing_outcome <- test_data$classe #Outcome for testing dataset
validation_outcome <- vali_data$classe #Outcome for validation dataset

#Create a Naive Prediction Vector
o <- rep(c("A","B","C","D","E"), 3923*c(0.2,0.2,0.2,0.2,0.2))
p <- rep(c("A","B","C"))
op <- rep(c(o,p))
naive_outcome <- sample(op)


#Creation of Model
class_numb <- match("classe",names(train_data))
predictors <- train_data[,-class_numb]
#modelFit_rf <- train(predictors, training_outcome, method="rf")
modelFit <- train(predictors, training_outcome, method="treebag")

#Performing a prediction with the model
prediction_on_test <- predict(modelFit, newdata=test_data[,-class_numb])
prediction_on_vali <- predict(modelFit, newdata=vali_data[,-class_numb])
#Compare the predicted vs real values
confusionMatrix(prediction_on_test, testing_outcome)
confusionMatrix(prediction_on_vali, validation_outcome)
confusionMatrix(naive_outcome, testing_outcome)






#plot(modelFit$finalModel, uniform=TRUE, main="Classification Tree")
#text(modelFit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
